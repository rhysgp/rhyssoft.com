#
# Required providers. For each required provider, its source and version.
#
terraform {
  backend "s3" {
    bucket = "rhyssoft-tfstate"
    key = "tfstate"
    region = "eu-west-2"
  }

  # The providers that will be used to provision the resources
  required_providers {
    # The 'aws' provider is defined below; 'aws' is the local name (it _could_
    # be called anything, but 'aws' is the preferred local name and calling it
    # something else would be perverse.
    aws = {
      # The source: "hashicorp/aws" is short for "registry.terraform.io/hashicorp/aws"
      # (this is its 'fully-qualified' address); it is the global identifier for provider
      source  = "hashicorp/aws"

      # AWS provider version constraint: allows the right-most version number
      # to change (in this case, 0)
      version = "~> 4.16.0"
    }
  }

  required_version = ">= 1.2.0"
}

#
# Define an AWS provider. We can define other providers as well, if we want to,
# so that we could, e.g., use a value generated by applying the configuration to
# AWS elsewhere (such as an IP address or an RDS endpoint).
#
provider "aws" { # using the provider's local name
  region  = "eu-west-2"
}

# Define the S3 bucket that contains the website data
resource "aws_s3_bucket" "rhyssoft_s3_bucket" {
  bucket = "rhyssoft-com"
}

# Define the server-side encryption algorithm for the bucket:
resource "aws_s3_bucket_server_side_encryption_configuration" "rhyssoft_s3_bucket_sse" {
  bucket = aws_s3_bucket.rhyssoft_s3_bucket.id
  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
    }
  }
}

# Define the bucket's versioning. We are disabling bucket versioning because the
# site is already versioned in git.
resource "aws_s3_bucket_versioning" "rhyssoft_s3_bucket_versioning" {
  bucket = aws_s3_bucket.rhyssoft_s3_bucket.id
  versioning_configuration {
    status = "Disabled"
  }
}

# Set the website configuration. Nuxt generates an index.html for the index page,
# and a 404.html for 'not found', which is the main error we're expecting.
resource "aws_s3_bucket_website_configuration" "rhyssoft_s3_website" {
  bucket = aws_s3_bucket.rhyssoft_s3_bucket.id
  index_document {
    suffix = "index.html"
  }

  error_document {
    key = "404.html"
  }
}


# Set the security policy for the bucket:
resource "aws_s3_bucket_policy" "rhyssoft_s3_policy" {
  bucket = aws_s3_bucket.rhyssoft_s3_bucket.id
  policy = data.aws_iam_policy_document.rhyssoft_s3_policy_readonly.json
}

data "aws_iam_policy_document" "rhyssoft_s3_policy_readonly" {
  statement {
    principals {
      identifiers = ["*"]
      type        = "*"
    }

    actions = [
      "s3:GetObject"
    ]

    resources = [
      "arn:aws:s3:::${aws_s3_bucket.rhyssoft_s3_bucket.bucket_domain_name}/*"
    ]
  }
}
